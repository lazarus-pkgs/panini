How to use pvQt version 0.5.xx   22 November 2008

pvQt is a viewer for panoramic and wide angle pictures that runs on Linux, Windows and Apple OSX.  It can load all the common photo and panoramic formats from ordinary image files or QuickTime VR (.mov) files.  Like other viewers, it shows pictures in rectilinear perspective, but can also display extremely wide angle views, and a range of intermediate perspectives.  It can do this because it "paints" pictures on a 3D sphere -- the "panosphere" -- which you view from the inside in true perspective.

SYSTEM REQUIREMENTS and LIMITATIONS

To display pictures pvQt uses OpenGL, a low level graphics API that is tightly integrated with a system's video drivers.  OpenGL cannot be installed as a separate piece of software.  

If the version of your OpenGL implementation is less than 1.2 or does not support cubic textures, pvQt will not run.  If the OpenGL version is less than 1.5 it may not be able to display all pictures correctly.

You will get best results with OpenGL version 2.0 and above.  That means you should have either a "gaming" video card, or a recent "multimedia" one.  But ultimate gaming performance is not needed: cards that will upgrade most desktop PCs to OpenGL 2.0 now cost from $50 to $70.  

On ubuntu Linux you will probably need to install the manufacturer's video drivers (both nVidia and ATI now supply them).  Ubuntu does not install these drivers by default because they are not open-source.

The "About" dialog shows information about your system's OpenGL facilities as well as the version of pvQT you are running.  pvQt reports these limits:
  texPwr2:	must texture dimensions be powers of 2? 0 (false) preferred.
  texMax:	maximum dimension of 2D textures, the bigger the better.
  cubeMax:	maximum dimension of cubic textures, the bigger the better.
  			
pvQt places no special demands on CPU speed or memory; if you can stitch panoramas, you will have no trouble viewing them.

Depending on the amount of OpenGL texture memory available, pictures may be shown at reduced resolution.  The actual displayed size (in megapixels) is shown in the pvQt window's title bar.  Cubic panoramas can generally be displayed at higher resolution than the other picture types.

VIEW CONTROLS

When you start pvQt without a command line, for example by double clicking an icon, it displays a wire frame model of the panosphere.  You can use the View commands to see how they change your view of the sphere.  All the view commands have keyboard shortcuts, shown in the View menu. 

The Yaw, Pitch and Roll controls rotate the viewing frame with respect to the panosphere, just as in a flight simulator.  Yaw and Pitch let you look in different directions; Roll adjusts which way is up.  You can control Yaw and Pitch with the mouse by holding down the button and moving the pointer in the direction you wish to look.

Zoom controls magnification by changing the vertical field of view on the panosphere.  When you resize the window, the displayed image grows or shrinks to maintain the selected vertical field.  To zoom with the mouse, hold down the right or middle button, move up to zoom in, down to zoom out.  You don't have to release the left button, zooming takes precedence over panning.
  
"Eye in" and "Eye out" change perspective by moving the point of view toward or away from the center of the panosphere.  Eye position is reported in units of the sphere's radius.  When Eye is zero, the viewing perspective is rectilinear, like a normal camera lens; as it increases, the perspective becomes more fisheye-like.  As the eye point moves out, you can zoom farther out to see wider views.  But you can zoom in to the same level of image detail at any perspective setting.

Several preset views are available via single keystrokes.  "Home" resets the yaw, pitch and roll angles to zero; "End" also resets zoom and eye position.  "F" gives the widest possible full frame view (a stereographic projection of the sphere, 275 degrees high) and "S" gives a "super wide" view, a circular image showing about 310 degrees of the sphere (note: in super wide mode the displayed vFOV is not correct).

The Turn controls ("L" and "R" keys) rotate the image on the panosphere in increments of 90 degrees.  

For convenience in viewing series of similar pictures, pvQt remembers the last selected Turn angle and FOV for each type of picture (but does not save them when you exit the program).

COMMAND LINE 

To show a picture, pvQt needs to know the format, angular size ("field of view"), image dimensions and where to find the image data.  All supported image sources define the image dimensions, and some also define format and angular size; but in many cases you must specify the format and field of view yourself.

When you start pvQt from the command line, you can optionally specify the first picture to be displayed.  If you give only a partial specification, pvQt will ask you for the rest of the information, as described below.

The first command line argument can be a 4 letter picture type name, one of:
	proj	PanoTools script or project
	qtvr	QuickTime VR panorama (cubic or cylindrical)
	cube	1 to 6 rectilinear cube face images 
	rect	Rectilinear (normal lens) projection 
	fish	Fisheye lens or mirror ball projection
	sphr	Equal angle spherical projection
	ster	Stereographic (super wide) projection
	cyli	Cylindrical panorama
	equi	Equirectangular panorama
	merc	Mercator panorama
	
The first 3 names are rarely needed, because project and qtvr files are normally recognized by their name extensions, and we ususally give more than one file name for cubic pictures.  If you do specify one of these types and don't give a file name, pvQt will ask for the file name before it displays anything.

For the other picture types, you need to specify the angular size; so the next argument can be the field of view, in degrees, as a floating point number.  This is always the fov of the longer image axis, if the image is not square.  The default fov is the largest legal fov for the type.

The last thing on the command line is a file name, or up to six file names for a cubic panorama.  pvQt can read tiff, jpeg and png image files, identified by the conventional file name extensions.

If you give only an image file name on the command line, pvQt will 
assume it is a rectilinear panorama if its width is exactly twice its height; otherwise it will pop a dialog asking for both the picture type and major field of view.  If you give more than one name, it will assume they are cube face images (to show a single cube face you must give the type name).  On Windows and Mac you can drag files onto the pvQt program icon to generate a files-only command line.

If you omit the file name, pvQt will pop a file selector dialog so you can choose the file(s) to be displayed.  If the picture type is rect, fish, cyli or equi, and you did not specify a fov on the command line, it will then ask you to specify the field of view.

If the command line is empty, pvQt displays a wire frame model of the panosphere without asking for a picture specification.  If you give just a picture type name, pvQt displays an image consisting of labelled empty frames (just a "front" frame for most picture types; or six cube faces).  You can then load image files by dragging them into the empty frames -- this is mainly useful for cubic panoramas.

PICTURE MENU

The Picture menu lets you select a picture type, then pvQt asks for files and fov.  If you cancel the file selector dialog, empty frames will be displayed.  If you cancel the fov dialog, the selected file will not be loaded and the previous picture will remain.

You can use the "rect" picture type to display any kind of image, much as an ordinary image processing program would.  There is no need to specify an FOV in that case.

The "fish" picture type uses the equisolid angle (also know as mirror sphere) projection, a classical panoramic format that is approximated by most modern fisheye lenses.  So you can use "fish" to display mirror sphere photos and computed panoramas up to 360 degrees in diameter.

The "sphr" picture type uses the equal-angle spherical projection.  Most stitchers can generate this projection, and some older or more technical fisheye lenses approximate it.

You can load 1 to 6 image files for the "cube" picture type.  They must be square images o the same size, and their sorted names must fall in the conventional cube face order: front, right, back, left, top, bottom.  So if you have names like foo_front.tif, foo_right.tif,..., you would have to change them to something like foo_1.tif, foo_2.tif,....  If you give fewer than 6 cube face files, pvQt will display empty frames for the missing ones.  Nonexistent or unreadable files will also generate empty frames.

Version 0.5 lets you load cube face images by dragging them into empty frames.  All must be square, but the sizes may vary.

When a picture is loaded, the pvQt window's title bar shows the file name, picture type and displayed size in megapixels, which will be smaller than the source image size if there is not enough OpenGL texture memory to hold the full image.  In case loading or display fails, the title bar will show an error message instead.

PROJECTION

The filed image is supposed to be a projection of the sphere onto the plane according to some mathematical rule; pvQt uses the rules it knows to paint the image back onto the sphere.  Selecting a picture type selects a projection, however all but the cubic projection are actually interchangeable -- pvQt will happily display the same image according to any of them.  The result will only be a "correct" view if pvQt is using the same projection that was used to make the image; but if not, it may still be an intersting picture.

So in version 0.5 the "P" key lets you cycle through the non-cubic projections without having to reload the image.  The "End" key restores the projection that was set when the image was loaded. 

FIELD OF VIEW

The angular size, or field of view of an image determines how much of the surface of the panosphere it occupies.  Each projection has a maximum feasible FOV, which is the default, however you can specify a smaller FOV for any non-cubic picture.

Just as with the projections themselves, it is perfectly feasible to change the apparent FOVs in any non cubic projection, without reloading the image.  And the FOVs along the rows and columns of the image can vary indepently (they are initially locked together via the image dimensions).  Version 0.5 lets you adjust them with the mouse by holding down the Alt key and the right mouse button.  The "End" key restores the original FOVs.

Changing the FOVs not only changes the apparent size of the image (which can be undone with the zoom control), but also alters the perspective, providing another route to possibly interesting pictures.

RELEASE INFORMATION

The version number shown in the "about" dialog has the form: major.minor.rev.  Major.minor is the "release number", set somewhat arbitrarily by me; rev is the SVN revision of the source from which it was built.  The SVN rev increases at every source archive update, and does not reset when I change the release number.  

Rev will have two revision numbers separated by a colon (:) if the program was built from a mixture of SVN revisions, and an "M" at the end if it was built from a locally modified copy of the archived code.  It may also be "???" if the program was built from an unknown source code revision.

Some of the functions described here may not work in all versions of pvQt.  Please consult the Release Notes for further information.  And please check the project site (https://sourceforge.net/projects/pvqt/) to see if you have the latest version.  

LICENSE

pvQt is free software, copyright (C) 2008 Thomas K Sharpless.  You 
can redistribute and/or modify it under the terms of the GNU General 
Public License as published by the Free Software Foundation; either 
version 2 of the License, or (at your option) any later version.

pvQt is distributed in the hope that it will be useful, but WITHOUT 
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License
along with pvQt; if not, write to Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

