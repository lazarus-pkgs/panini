Development notes for pvQt

20 Sept 08	Adapting the freepv QTVR reader

Goal:
  use Pablo's QTVRDecoder, with QImage replacing his Image

Files copied from freepv/src:
	Image.h
	JpegReader.h, .cpp
	Parameters.h, .cpp
	QTVRDecoder.h, .cpp

Initial strategy:
  make Image class a wrapper around QImage,
  modify Parameters to fit into Qt framework,
  use QTVRDecoder unchanged.
  replace freepv jpeg decoder with Qt's (use QBuffer as "device")

	
	
1 October 2008  a bug un ubuntu hardy heron?
	When main window is maximized, the UI goes dead.
	This is not the case on Win32 (minGW).
	
2 Oct 2008	Adapting QTVRDecoder 
	It first parses and indexes the QTVR file then extracts 
	all found pano images by rereading sections as jpeg.
	It uses stdio so will only work on a local file.  Should 
	have the ability to work from memory too.
	It would be good to be able to load the cube faces
	separately.
	Repackaging as a QImageIOPlugin would provide a lot of
	nice behavior.  The downside is that it would be a lot of 
	work and the plugin dll has to be installed in a special 
	directory name.  A probably much easier alternative	is to 
	make a readQTVR class that just gets the jpeg files in core, 
	and use a QImageReader on those.  I think this could be done
	without making	the QTVR reader depend on Qt.
  [no it can't, much better to revise QTVRDecoder to use QImage
  and a few other Qt types.  This I have done.]
	But first I'll try to use QTVRDecoder pretty much as-is,
	with a Qt-based Image class, defs from parameters.h or 
	utils.h replaced with local defs. 
 3 Oct:  pvQt_QTVR.{h,cpp} have a Qt-based QTVRDecoder that
    returns QImages, one at a time.  It still uses stdio and
    a C-string file name.  I revised the tile copy logic to
    also do the 90 degree rotation of cylindrical panos -- it
    now uses a single generalized add tile to image routine
    for all cases.

11 Oct 2008
	30 downloads from SF in 1st 2 days! And a lot of good feedback, 
	from hugin builders and others.
	
	Harry v.d. Wolf has contributed a small patch that lets pvQt
	build on OSX -- committed tonite.  He also noticed that he got
	a very big patch after his change.  That's because I put the
	ui_xxx headers in svn, but they don't belong there because
	they are regenerated auotmatically.  So I have pulled those.
	Also put copyright/GPL notice in all source files.

13 Oct 2008
	Revised pvQt-build.txt to clarify the procedure for becoming a 
	registered developer, and add some coding standards I'd like such
	developers to follow.  One of those is to allow only Unicode file 
	names into pvQt, so now I must  -- 
done	change the way pvQt reads its command line to conform.

    Other TODOs:

done	Add MSVS-project to the source tree.

done	Reverse pitch key direction in cubic.

done	Make PageUp/Down do zoom, and Ctl-Pgup/dn do perspective.

	Put picture type, viewed size and filename in main window title.

done	Put a helpful title on image file selector window.
	
test	Probe OGL capabilities in pvQtView, and tell user about limitations.
	In particular check OGL rev, vram and pwr-of-2 textures at startup;
	use texture proxies to fit each picture to the available resources.

done	Add angular size (fov) to the picture type dialog.

done	Get FOV from user if not determined by picture type.

part	Show pictures with restricted fovs.

cube	Make sure missing or unreadable image files give empty frames.

done	Show rectilinear pictures (up to 90 deg)

	Show cylindrical pictures.

	Show hemispherical pictures (incl. fisheye).

	Construct a debuggable QTVR parser, that takes only stream args (input
	and log).  Support caching jpegs from the stream.  This will be a major
	rewrite of the stdio-based parser.
	
	Design ways to build lens correction (adjustable radial projection fns) 
	into the various display modes.

17 Oct 2008

	Now have a feasible scheme for adjusting frame FOVs and size: given
	image dims and fovs, set required frame fovs, then set frame dims by 
	scaling image dims via fov ratios.
	
	BUT image FOVs must be set correctly: only one FOV is free, the other
	is then fixed by the dimensions.  The type/fov dialog must show dims,
	and automatically set 2nd fov when one is entered (and both when type
	changes -- use HFOV as primary).  Probably shd just take HFOV.

	If the image fovs agree with dims, then the same should be true for
	the frame.  But we may have to polish a little.

19 Oct 2008

	Can only set one FOV in the pictype dialog (the longer one) -- must
	set the other in Pic according to dimensions etc.
	Have modified the dialog, now must fix Pic

	There can be no hemi pictype; but fish == mirrorball, r/f = sin(a/2),
	can go to 360 deg diameter; this is the OGL "sphere map".
	Must remove hemi.  Then only cube can have >1 file.
	Must implement sphere map display.  Then can show all but cyli and
	big recti.

	
23 Oct 2008

  PROGRESS!
	face FOV adjustment and picture packing are working in all cases 
	no source file gives empty image (at max FOV) ditto
	all pic types but cyli and fish are displayed (no more 'hemi' type).
	title bar and about box are showing useful info including SVN rev

	Will now make release 0.2:	
	  Source tarball
	  Binary Win32 self installer
	  
	Then implement fish/sphere (shd be a piece of cake :->)

24 Oct 2008
	Or maybe fish then release.
	
	Fixed some problems on linux (illegible font in about box)
	also a bug that made adaptive image reduction fail.
	Still have erratic behavior on cancel file load: often the
	correct empty frame; sometimes black screen; sometimes the
	old image stays up with "ERROR: no error" in window title.
	
	QDevelop stopped working after I installed a security update 
	allegedly related to printing.  Now it segfaults at start.
	So it's back to Vista.  Guess I should get Eclipse...
	
27 Oct 2008

	Fisheye/spherical only a little trouble.  OGL sphere map 
	has opposite hand to cube and 2D, so had to add a custom
	initial view matrix to compensate.
	
	But I released 0.2.35 a bit prematurely.  Mainly it had bad
	code for adapting pictures size, so would not work on OGL
	systems requiring pwr-of-2 texture dimensions, and worked poorly
	on others.  That is fixed, along with several minor bugs:
	-- pvQt.pro: no longer fails when build directory doesn't exist
	-- About box shows "texPwr2" when appropriate, and no longer 
	  clips the 2nd line
	-- Type/fov dialog shows width & height in correct order
	-- pvQtView.cpp shd not give compile error when GLint != int
	
	Committing and releasing this as 0.2.36
	
28 Oct 2008

	Preparing to debug the qtvr parser.
	1) split it from the image reader as a Qt-independent class
	2) (re)insert debug print statements to trace the parse.
	  These should be generic, printf-like statements.
	I think it would be a mistake to try to make this parser 
	handle a stream instead of a stdio file.  Let's assume we can
	always download remote qtvr's to local files.
	
	Found an elementary bug in the parser, trying to read past 
	EOF.  Fixing that makes many more QTVR's readable. (This 
	without any structural change to the parser).
	
	Now might as well put in mouse panning and release 0.3 :)
	
	That was pretty easy, once I figured out that my "detent" on
	the Y and P angles was responsible for bad mouse response.
	Now Y and P move in 16ths of a degree under mouse control, and 
	fall back into the detents after 2 keyboard steps.
	
	The final polish on 0.3 shd be to probe OGL explicitly for cube
	map and proxy textures; and deal with their absence.
	
	The next big thing will be to a smoother sphere with texture
	coordinates matched to the picture's projection and FOV 
	(necessary / desirable for all 2d textures; not cube).
	I like the idea of a recursive tesselation starting from the
	tetrahedron.  Should put that in a compiled-in array as the 
	vertices never change.  Texture coords should be scaled to 
	the actual image fov and clamped to black outside.  Use a
	radial table[r^2] to speed t.c. calculation. 
	
29 October 2008

	Continuing that thought -- may be able to use precomputed tex
	coords, just scale picture FOV <=> [0:1] with texture matrix.
	Also, can we rotate picture with respect to screen coords by
	using the texture matrix?  Worth a try for 0.3.
	
	But first, try to make face size adapatation robust enough to
	work on Harry's mac!  It does not appear that proxy texture can
	be probed for; but it shd be present if OGL version >= 1.1.  He
	says cube map worked in 0.1, but I'm gonna check for it anyhow.
	Note need only check the all-extensions string if version < 2, 
	and shd look for both GL_ARB_xxx and GL_EXT_xxx.
	
	Well, second then.  Just couldn't resist trying texture matrix,
	so now we have picture rotation with respect to the panosphere
	(whose vertical axis stays vertical on screen) and 90 degree
	orientations controlled by keys.  Committed SVN 37. 
	
	Try to run if OGL version >= 1.1 and cube mapping is available.
	Report probed OGL features in last line of About.  SVN38.
	
30 Oct 2008

	For mac, try just assuming OGL version 2.
	
	Improved commandline in several ways and updated usage doc.
	The main ones are: can specify fov as 2nd arg after image types;
	get empty frames right away if command is just type.

31 Oct 2008

	Got Qt for mac distrib.  gl_mac.cpp uses AGL calls; clearly sets
	up an RGBA context.  So maybe the mac problem is that my RGB texels
	are getting converted to RGBA texels that then won't fit vram??
	Anyhow, changed the proxy texture test to use RGBA instead of RGB,
	committed that as SVN 43 (along with some better OGL error reporting
	and cancel handling); asked Harry to try it.
	
	The official Apple OGL capabilities matrix 
	(http://developer.apple.com/graphicsimaging/opengl/capabilities/) 
	says Harry's GMA 950 / OSX 10.5 system is OGL v 1.2, but with cube
	mapping and non-pwr-of-2 textures.
	
	Looking at Apple OpenGL programming Guide
	(http://developer.apple.com/documentation/GraphicsImaging/Conceptual/
	OpenGL-MacProgGuide/) it seems they consider RGBA standard, and 
	suggest best source format for texture image loading is GL_BGRA, 
	GL_UNSIGNED_INT_8_8_8_8_REV.  That would seem to agree with the QImage 
	ARGB format.  So let's try making everything RGBA internal, BGRA REV 
	external & see what happens.  Note red book pp 315-319 explain the 
	external pixel formats.
	
	Well, that seems to work -- and picture loading is clearly faster!
	Definitely a winner, commit as SVN 44.
	
	Advance rev to 0.3, build, test => pretty consistent crash when cancel 
	after showing an image.  Debug says segfault, down in ntdll, thread 1,
	no valid stack trace.  So let's trace if from the cancel...
	
02 Nov 2008

	0.3 is getting a good reception.  It works on several systems where 0.2 
	didn't.  Mouse panning is popular, so let's add mouse zooming (hold rgt
	button).
	
	That was easy (~10 minutes).  Updated usage.  Removed specs from source
	tree as I'm not going to maintain it.
	
03 Nov 2008

	Trying to get smoother mouse control...
	combine pan & tilt deltas in one redraw -- big improvement.	
	Change to one-shot timer to allow syncing.
	Try sync with draw using glFinish() -- can't see any difference.
	Fiddling with timer interval, 60 msec about as good as possible
	(on my fast OGL2 machine).
	Commit SVN 48.
	
	Added request for a custom OGL context to the pvQtView c'tor,
	with alpha channel and accum buffer, as I read somewhere that
	this fixes an OGL setup problem with QGLWidget (it wasn't bad
	cube mapping, but what the hell...).  This at least does not seem
	to damage the Win32 version any.  Committed as SVN 49 and wrote
	Harry.  Will now regress on linux.
	
	That led to one small bugfix: was not posting widow title when
	sowind a qtvr from commandline.
	
05 Nov 2008 	Change has comne to America!  Whewww.

	Have an alpha version of class quadsphere, to generate table of
	a sphere tesselation with texture coordinates for non-cubic
	picure types.  I'll probably use it in a offline program to
	generate source code tables to be compiled into pvQt, but will
	test it first within pvQt.  
	
	But first, two putative improvements to pvQt:
	1) clamp to edge for cubic, but to border for other types, and
	change texture filter modes to linear from nearest.  Result:
	white lines at joins of all pic types.  Do we need bordered
	images to use linear filter?  No, CLAMP_TO_EDGE takes out
	the white lines.  And low res images a bit less pixelated.
	NOTE: will have to revisit clamping when install quadsphere.
OK	2) make pvQtPic get maxFovs from a pictureTypes object.  This
	requires a translation between pvQtPic::picType and pictureTypes
	index. I added that to pictureTypes, folded pictureTypes.h into
	pvQtPic.h and removed pictureTypes.h from the project.
	NOTE: pictureTypes.cpp still has the bogus FOV for rect.
	
16 Nov 2008

	Completing version 3 of quadsphere, which should be perfect.
	Must finish code to fix up the +/-Pi seam.
	
OK	Quadsphere has equal angle and equisolid angle projections,
	so must add an equal angle picture type ("sphr", keep 
	"fish" for equisolid angle).  PTGui's "sphere" projection
	actually is equal angle; PT's "mirror ball" is equisolid.
	
	Bug:  contrary to docs, cancelling FOV dialog does not give
	empty frames.
	
	Spec change: turn should not reset at picture load.
	
	I've been able to build and debug on a Mac, but not solve 
	the problem with cubic qtvrs.  It looks as if texture load
	may be failing even though proxy test passed.  Maybe this
	has to do with limiting texture dims to MAX_TEXTURE and
	MAX_CUBE_TEXTURE on the working calls but not the proxy
	ones?  Anyhow, must fetch the MAX's and respect them;
	also check for error after every tex image load.
	
17 Nov 2008

	Tried deleting textures before proxy test; but that does
	not work (wipes out all texture options).
	
	Finally figured out how to do proxy test right -- once only,
	before loading any pictures.  Then keep face sizes <= the
	found limits  (revised fitFaceToImage to handle this).  This 
	works, and I think it might fix the Mac mystery too.  On the
	T60 it shows most things OK (tho small), with occasional 
	"invalid value" errors at cubic image load. Works great on 
	Winxp1. 
	
	Committed rev 55 and asked Harry to try it.
	
18 Nov 2008

	Finished fixing the wrap seam.  Top and bottom center points
	needed special splitting.  Fish and sphere don't want split X,
	so just copy TCs for those.  Also removed the blanking at back
	of those views, because it looks worse than the breakup (which
	might be improvable -- later!)
	
	Overall the picture quality looks about as good as one could
	hope for with this technology. 