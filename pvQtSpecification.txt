pvQt Specifications

pvQt is a multiplatform projective image viewer, meant mainly as a tool for panoramic photographers.  Although designed to handle spherical panoramas, it can also display pictures of smaller angular sizes.  It shows images projected on a 3D spherical virtual screen.  The  view can be rotated freely in 3 dimensions, and the perspective can be changed smoothly from rectilinear to "super fisheye" by moving the apparent point of view.  

pvQt handles all common photographic and panoramic image formats:  rectilinear, fisheye/spherical, cylindrical, equirectangular, and cubic.  It can load pictures from QTVR files and Pano Tools scripts as well as many common image file types.  

The display system depends on OpenGL version 2.  OGL texture mapping operations paint the picture onto "panosphere", which is viewed from within in true perspective.  Initially the eye is at the center, giving a rectilinear perspective, like the QuickTime and DevalVR viewers; the maximum field of view is 137.5 degrees vertically -- a bit more than the most extreme wide angle camera lenses.  However the viewpoint can be moved out along a radius to give fisheye-like perspectives, that can cover wider fields -- up to 275 degrees when the the eye is 1 radius from center.  Actually these views arestereographic projection).  The maximum eye distance of 1.1 radii gives a "super fisheye" circular view covering nearly 187 degrees on the sphere.

Cylindrical panoramas are projected on a cylindrical screen whose height matches the vertical field of view.  Here again, moving the point of view away from center affords fisheye-like wide field views.  Rectilinear images whose maximum angular dimension exceeds 90 degrees are also shown on the cylindrical screen; smaller ones are projected on the sphere by packing them into a single "cube face".

Hemispherical images (square, 180 x 180 degrees) are projected on one half of the sphere.  "Fisheye" images are treated as hemispherical, by packing or cropping them into the 180 x 180 degree format.  Since few fisheye lenses actually follow the "equal angle" projection, there will be some radial distortion in most cases.  This can be minimized by assigning a bogus angular size and/or adjusting the eye point. 

Correct 3D display requires that the images' angular sizes be known.  They are fixed by convention in QTVR files and cubic image sets, and pvQt can get the angular sizes (and file names) of images created with PanoTools or one of the PT frontends (PTAssembler, PTGui, hugin) by reading the stitcher script or project file.  However in some cases you may have to tell pvQt the image height or width in degrees (a reasonable guess is usually good enough). 

pvQt gets picture specification commands from the command line or via menus.  These specifications may be complete or partial.  When necesary it uses GUI dialogs to ask the user for more information including files, picture formats and angular sizes.

Implementation 

pvQt is built on the Qt portable C++ application framework, which can generate Unix/Linux, Windows and Mac OSX executables from common source code.  It requires an OpenGL implemementation at version 2 or better, and makes no effort to support obsolescent display hardware.  The only other required package is Gnu zlib.

The core classes are pvQtView, a QGLWidget subclass that displays pictures; pvQtPic, which holds picture specifications and source images; and pvQt_QTVR, a port of the qtvr decoder from Pablo D'Angelo's freepv.

pvQtPic can load images from files in any format supported by QImageReader, and from memory images of most file types, and can read image specifications from PanoTools style scripts.  It also accepts memory resident images, either QImages or any raster image that can be described by a simple generic interface.  The base implementation can only read local files, but there are hooks to make it easily subclassed to provide other ways of acquiring specifications and images, such as downloading from a website. 

The UI consists of a single main window with two menus, one for loading pictures and one for adjusting the displayed view.  The view commands include presets for certain useful combinations of eye position and zoom, and one to reset the yaw, pitch and roll angles to zero.  All view commands have keyboard shortcuts.

An invisible QWidget subclass, GLwindow, contains the pvQtView, insulating it from the main window as required by the Qt architecture.  It also contains a pvQtPic object.  It handles picture loading commands from the GUI or the command line, by verifying the picture format and reading a set of filed images, which it passes to the pvQtPic.








